{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction Java 核心技术 数据结构与算法 10个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树。10个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。 By Ace            此页面修订于： 2019-06-19 10:37:54 "},"Java核心技术/Java基础.html":{"url":"Java核心技术/Java基础.html","title":"Java 基础","keywords":"","body":"Java 基础 Exception 和 Error 的区别 都继承了 Throwable 类，可以被抛出（throw）和捕获（catch）。Exception 是程序正常运行中，可以预料的意外情况，可能并且应该被捕获，进行相应处理。Error 是指正常情况下，不大可能出现的情况，所以不便于也不需要被捕获。 尽量不用捕获类似 Exception 这样的通用异常，而是应该捕获特定异常。不要生吞异常。 final、finally、finalize final 不等同于 immutable，final List strList = new ArrayList<>() final 只能约束 strList 这个引用不可以被赋值，但是 strList 对象行为不被 final 影响，添加元素等操作是完全正常的。 需要关闭的连接等资源，更推荐使用 Java 7 中添加的 try-with-resources 语句，通常 Java 平台能够更好地处理异常情况，编码量也要少很多。 finalize 被设计为在对象被垃圾收集前调用。现在已经不推荐使用，并且在 JDK 9 开始被标记为 deprecated。 强引用、软引用、弱引用、幻想引用 不同的引用类型，主要体现的是对象不同的可达性状态和对垃圾收集的影响。 强引用：普通对象引用，只有超过了引用的作用域或者显示地将相应的强引用赋值为 null ，就是可以被垃圾收集了。 软引用：可以让对象豁免一些垃圾回收，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。可用于实现内存敏感的缓存。 弱引用：不能使对象豁免垃圾收集，可以用来构建一种没有特定约束的关系。 幻想引用：提供一种确保对象被 finalize 以后，做某些事情的机制。 int 和 Integer Java 5 中新增了静态工厂方法 valueOf，利用一个值缓存机子，-128 ~ 127。 自动装箱、拆箱，算是一种语法糖，发生在编译阶段，生成的字节码是一致的。 By Ace            此页面修订于： 2019-06-19 10:37:54 "},"数据结构与算法/复杂度分析.html":{"url":"数据结构与算法/复杂度分析.html","title":"复杂度分析","keywords":"","body":"复杂度分析 时间复杂度 T(n): 代码执行的时间 n: 数据规模的大小 f(n): 每行代码执行的次数总和 O: 代码的执行时间T(n)与f(n)表达式成正比 大 O 时间复杂度表示法表示代码执行时间随数据规模增长的变化趋势，也叫渐进时间复杂度，简称时间复杂度。 n 很大时，可以忽略低价、常量和系数。 只关注循环执行次数最多的一段代码。 加分法则：总复杂度等于量级最大的那段代码的复杂度。 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。 最好情况时间复杂度：在最理想的情况下，执行这段代码的时间复杂度。最坏情况时间复杂度：在最糟糕的情况下，执行这段代码的时间复杂度。 By Ace            此页面修订于： 2019-06-19 10:37:54 "},"数据结构与算法/数组与链表.html":{"url":"数据结构与算法/数组与链表.html","title":"数组与链表","keywords":"","body":"数组与链表 写链表代码： 将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。 利用哨兵简化实现难度 重点留意边界条件处理如果链表为空时如果链表只包含一个节点时如果链表只包含两个节点时代码逻辑在处理头节点和尾结点的时候 举例画图，辅助思考 By Ace            此页面修订于： 2019-06-19 10:37:54 "},"数据库/数据库安装.html":{"url":"数据库/数据库安装.html","title":"数据库","keywords":"","body":"Linux 安装 MySQL 官网下载 登录官网 https://dev.mysql.com/downloads/mysql/ 选择Linux操作系统，5.7.26版本 下载64位安装包 wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz 安装 解压移动到相应路径 tar zxvf mysql-5.7.26-linux-glibc2.12-x86_64.tar.gzmv mysql-5.7.26-linux-glibc2.12-x86_64 /usr/local/server/mysql-5.7.26 添加mysql用户和用户组 groupadd mysqluseradd -r -g mysql mysql 更新mysql目录权限 cd /usr/local/server/mysql-5.7.26chown -R mysql. ./ 创建mysql数据存储目录 mkdir /data/local/mysqlmkdir /data/local/mysql/databasechown -R mysql. /data/local/mysql/ 修改/etc/my.cnf [mysqld] basedir=/usr/local/server/mysql-5.7.26 datadir=/data/local/mysql/database socket=/data/local/mysql/mysql.sock log_bin=/data/local/mysql/mysql-bin port=4306 server-id=1 lower_case_table_names=1 default-storage-engine=INNODB character-set-server=utf8 collation-server=utf8_general_ci symbolic-links=0 log-error=/var/log/mysql/mysql.log pid-file=/var/run/mysql/mysql.pid [mysqld_safe] log-error=/var/log/mysql/mysql.log pid-file=/var/run/mysql/mysql.pid # # include all files from the config directory # !includedir /etc/my.cnf.d 数据库初始化 yum install libaio/usr/local/server/mysql-5.7.26/bin/mysqld --initialize --user=mysql 注意生成临时root密码 初始化日志目录和pid目录 mkdir /var/log/mysqlchown -R mysql. /var/log/mysqlmkdir /var/run/mysqlchown -R mysql. /var/run/mysql 启动mysql /usr/local/server/mysql-5.7.26/support-files/mysql.server start 添加service服务和开机自启动 cp .support-files/mysql.server /etc/init.d/mysqldchkconfig --add mysqldchkconfig --list 添加系统路径 vim /etc/profile export MYSQL_HOME=/usr/local/server/mysql-5.7.26 export PATH=$PATH:$MYSQL_HOME/bin source /etc/profile 运行 登录mysql 在/etc/my.cnf中添加 [client] socket=/data/local/mysql/mysql.sock 重置密码 set password=password('新密码'); 增加远程登录权限 use mysql; select user, host from user; update user set host='%' where user='root'; flush privileges; By Ace            此页面修订于： 2019-06-19 10:37:54 "},"运维/dubbo.html":{"url":"运维/dubbo.html","title":"Dubbo","keywords":"","body":"Dubbo Apache Dubbo 服务注册 Nacos POM 配置 2.7.1 1.0.0 org.apache.dubbo dubbo ${dubbo.version} org.apache.dubbo dubbo-spring-boot-starter ${dubbo.version} org.apache.dubbo dubbo-registry-nacos ${dubbo.version} com.alibaba.nacos nacos-client ${nacos.client.version} application.yml 配置 # dubbo 配置 dubbo: application: name: soa-provider protocol: name: dubbo port: 10022 registry: address: nacos://ip1:8848,ip2:8848,ip3:8848 provider: group: local BootStrap 配置 @SpringBootApplication @ComponentScan(\"com.tv\") @EnableDubbo(scanBasePackages = \"com.tv.soa.api.impl\") public class SoaProviderApplication { public static void main(String[] args) { SpringApplication.run(SoaProviderApplication.class, args); } } Alibaba Dubbo 服务注册 Nacos POM 配置 引入spring-boot-starter-web，没有web环境dubbo在spring启动后自动shutdown org.springframework.boot spring-boot-starter org.springframework.boot spring-boot-starter-logging org.springframework.boot spring-boot-starter-web com.alibaba dubbo-registry-nacos 0.0.1 com.alibaba dubbo 2.6.5 com.alibaba.spring spring-context-support 1.0.2 io.netty netty-all 4.1.34.Final application.yml 配置 多地址第一个后面以?分隔，其他同上 # dubbo 配置 dubbo: application: name: soa-provider protocol: name: dubbo port: 10022 registry: address: nacos://ip1:8848?ip2:8848,ip3:8848 provider: group: local By Ace            此页面修订于： 2019-06-19 10:37:54 "},"运维/nacos.html":{"url":"运维/nacos.html","title":"Nacos","keywords":"","body":"Nacos Nacos 集群安装 Github下载 wget https://github.com/alibaba/nacos/releases/download/1.0.0/nacos-server-1.0.0.tar.gz 解压安装 tar zxvf nacos-server-1.0.0.tar.gz cp -R nacos /usr/local/server/nacos-server-1.0.0 配置集群配置文件 vim conf/cluster.conf #it is ip #example 172.18.1.152:8848 172.18.1.153:8848 172.18.1.154:8848 配置mysql数据库 create database nacos_config default character set utf8 collate utf8_bin; 执行sql脚本 grant all on nacos_config.* to 'nacos'@'%' identified by 'nacos2019'; flush privileges; application.properties 配置数据库链接 vi application.properties # spring server.contextPath=/ server.servlet.contextPath=/ server.port=8848 db.num=1 db.url.0=jdbc:mysql://172.18.156.16:4306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true db.user=nacos db.password=nacos2019 nacos.cmdb.dumpTaskInterval=3600 nacos.cmdb.eventTaskInterval=10 nacos.cmdb.labelTaskInterval=300 nacos.cmdb.loadDataAtStart=false # metrics for prometheus #management.endpoints.web.exposure.include=* # metrics for elastic search management.metrics.export.elastic.enabled=false #management.metrics.export.elastic.host=http://localhost:9200 # metrics for influx management.metrics.export.influx.enabled=false #management.metrics.export.influx.db=springboot #management.metrics.export.influx.uri=http://localhost:8086 #management.metrics.export.influx.auto-create-db=true #management.metrics.export.influx.consistency=one #management.metrics.export.influx.compressed=true server.tomcat.accesslog.enabled=true server.tomcat.accesslog.pattern=%h %l %u %t \"%r\" %s %b %D %{User-Agent}i # default current work dir server.tomcat.basedir= ## spring security config ### turn off security #spring.security.enabled=false #management.security=false #security.basic.enabled=false #nacos.security.ignore.urls=/** nacos.security.ignore.urls=/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/login,/v1/console/health/**,/v1/cs/**,/v1/ns/**,/v1/cmdb/**,/actuator/**,/v1/con sole/server/** nacos.naming.distro.taskDispatchThreadCount=1 nacos.naming.distro.taskDispatchPeriod=200 nacos.naming.distro.batchSyncKeyCount=1000 nacos.naming.distro.initDataRatio=0.9 nacos.naming.distro.syncRetryDelay=5000 nacos.naming.data.warmup=true nacos.naming.expireInstance=true 启动服务 bin/startup.sh 配置nginx upstream nacos-server { server 172.18.1.152:8848; server 172.18.1.153:8848; server 172.18.1.154:8848; } server { listen 80; server_name nacos.ice-leaf.com; location / { proxy_pass http://nacos-server; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwared-For $proxy_add_x_forwarded_for; } } By Ace            此页面修订于： 2019-06-19 10:37:54 "},"运维/springboot-admin.html":{"url":"运维/springboot-admin.html","title":"SpringBootAdmin","keywords":"","body":"Spring Boot Admin SpringBoot Admin Server 新建项目 修正 pom.xml 4.0.0 org.springframework.boot spring-boot-starter-parent 2.1.4.RELEASE com.ice-leaf springboot-admin-server 1.0.0 spring-boot-admin-server Spring Boot Admin Server Project for Spring Boot 1.8 2.1.4 de.codecentric spring-boot-admin-starter-server org.springframework.boot spring-boot-starter-test test de.codecentric spring-boot-admin-dependencies ${spring-boot-admin.version} pom import org.springframework.boot spring-boot-maven-plugin 添加 @EnableAdminServer @EnableAdminServer @SpringBootApplication public class SpringbootAdminApplication { public static void main(String[] args) { SpringApplication.run(SpringbootAdminApplication.class, args); } } 添加 application.yml management: endpoint: health: show-details: always endpoints: web: exposure: include: '*' SpringBoot Admin Client 添加 pom.xml de.codecentric spring-boot-admin-starter-client 2.1.4 添加 application.yml # springboot admin server spring: boot: admin: client: url: http://springboot-admin.ice-leaf.com instance: name: dev-soa-provider service-url: By Ace            此页面修订于： 2019-06-19 10:37:54 "}}