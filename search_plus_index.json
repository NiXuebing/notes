{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction Java 核心技术 数据结构与算法 10个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树。10个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。 By Ace            此页面修订于： 2019-05-15 11:36:04 "},"Java核心技术/Java基础.html":{"url":"Java核心技术/Java基础.html","title":"Java 基础","keywords":"","body":"Java 基础 Exception 和 Error 的区别 都继承了 Throwable 类，可以被抛出（throw）和捕获（catch）。Exception 是程序正常运行中，可以预料的意外情况，可能并且应该被捕获，进行相应处理。Error 是指正常情况下，不大可能出现的情况，所以不便于也不需要被捕获。 尽量不用捕获类似 Exception 这样的通用异常，而是应该捕获特定异常。不要生吞异常。 final、finally、finalize final 不等同于 immutable，final List strList = new ArrayList<>() final 只能约束 strList 这个引用不可以被赋值，但是 strList 对象行为不被 final 影响，添加元素等操作是完全正常的。 需要关闭的连接等资源，更推荐使用 Java 7 中添加的 try-with-resources 语句，通常 Java 平台能够更好地处理异常情况，编码量也要少很多。 finalize 被设计为在对象被垃圾收集前调用。现在已经不推荐使用，并且在 JDK 9 开始被标记为 deprecated。 强引用、软引用、弱引用、幻想引用 不同的引用类型，主要体现的是对象不同的可达性状态和对垃圾收集的影响。 强引用：普通对象引用，只有超过了引用的作用域或者显示地将相应的强引用赋值为 null ，就是可以被垃圾收集了。 软引用：可以让对象豁免一些垃圾回收，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。可用于实现内存敏感的缓存。 弱引用：不能使对象豁免垃圾收集，可以用来构建一种没有特定约束的关系。 幻想引用：提供一种确保对象被 finalize 以后，做某些事情的机制。 int 和 Integer Java 5 中新增了静态工厂方法 valueOf，利用一个值缓存机子，-128 ~ 127。 自动装箱、拆箱，算是一种语法糖，发生在编译阶段，生成的字节码是一致的。 By Ace            此页面修订于： 2019-05-15 11:36:04 "},"数据结构与算法/复杂度分析.html":{"url":"数据结构与算法/复杂度分析.html","title":"复杂度分析","keywords":"","body":"复杂度分析 时间复杂度 T(n): 代码执行的时间 n: 数据规模的大小 f(n): 每行代码执行的次数总和 O: 代码的执行时间T(n)与f(n)表达式成正比 大 O 时间复杂度表示法表示代码执行时间随数据规模增长的变化趋势，也叫渐进时间复杂度，简称时间复杂度。 n 很大时，可以忽略低价、常量和系数。 只关注循环执行次数最多的一段代码。 加分法则：总复杂度等于量级最大的那段代码的复杂度。 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。 最好情况时间复杂度：在最理想的情况下，执行这段代码的时间复杂度。最坏情况时间复杂度：在最糟糕的情况下，执行这段代码的时间复杂度。 By Ace            此页面修订于： 2019-05-15 11:36:04 "},"数据结构与算法/数组与链表.html":{"url":"数据结构与算法/数组与链表.html","title":"数组与链表","keywords":"","body":"数组与链表 写链表代码： 将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。 利用哨兵简化实现难度 重点留意边界条件处理如果链表为空时如果链表只包含一个节点时如果链表只包含两个节点时代码逻辑在处理头节点和尾结点的时候 举例画图，辅助思考 By Ace            此页面修订于： 2019-05-15 11:36:04 "},"数据库/数据库安装.html":{"url":"数据库/数据库安装.html","title":"数据库","keywords":"","body":"Linux 安装 MySQL 官网下载 登录官网https://dev.mysql.com/downloads/mysql/ 选择Linux操作系统，5.7.26版本 下载64位安装包wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz 安装 解压移动到相应路径tar zxvf mysql-5.7.26-linux-glibc2.12-x86_64.tar.gzmv mysql-5.7.26-linux-glibc2.12-x86_64 /usr/local/server/mysql-5.7.26 添加mysql用户和用户组groupadd mysqluseradd -r -g mysql mysql 更新mysql目录权限cd /usr/local/server/mysql-5.7.26chown -R mysql. ./ 创建mysql数据存储目录mkdir /data/local/mysqlmkdir /data/local/mysql/databasechown -R mysql. /data/local/mysql/ 修改my.cnfvi /etc/my.cnf``` [mysqld] basedir=/usr/local/server/mysql-5.7.26 datadir=/data/local/mysql/database socket=/data/local/mysql/mysql.sock log_bin=/data/local/mysql/mysql-bin port=4306 server-id=1 lower_case_table_names=1 default-storage-engine=INNODB character-set-server=utf8 collation-server=utf8_general_ci symbolic-links=0 log-error=/var/log/mysql/mysql.log pid-file=/var/run/mysql/mysql.pid [mysqld_safe] log-error=/var/log/mysql/mysql.log pid-file=/var/run/mysql/mysql.pid # include all files from the config directory # !includedir /etc/my.cnf.d 6. 数据库初始化 `yum install libaio` `/usr/local/server/mysql-5.7.26/bin/mysqld --initialize --user=mysql` 注意生成临时root密码 ![mark](http://pic-cloud.ice-leaf.top/pic-cloud/20190515/MhoR7yOx8ClE.png?imageslim) 7. 初始化日志目录和pid目录 `mkdir /var/log/mysql` `chown -R mysql. /var/log/mysql` `mkdir /var/run/mysql` `chown -R mysql. /var/run/mysql` 8. 启动mysql `/usr/local/server/mysql-5.7.26/support-files/mysql.server start` 9. 添加service服务和开机自启动 `cp .support-files/mysql.server /etc/init.d/mysqld` `chkconfig --add mysqld` `chkconfig --list` 10. 添加系统路径 vim /etc/profile export MYSQL_HOME=/usr/local/server/mysql-5.7.26 export PATH=$PATH:$MYSQL_HOME/bin source /etc/profile ## 运行 1. 登录mysql ![mark](http://pic-cloud.ice-leaf.top/pic-cloud/20190515/UBwT6kUPMyWW.png?imageslim) 在`/etc/my.cnf`中添加 [client] socket=/data/local/mysql/mysql.sock 2. 重置密码 `set password=password('新密码');` 3. 增加远程登录权限 use mysql; select user, host from user; update user set host='%' where user='root'; flush privileges; ``` By Ace            此页面修订于： 2019-05-15 18:05:53 "}}